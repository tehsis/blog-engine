{"id":"snippets-in-java","date":"2018-07-04","title":"Useful Snippets in Java","hidden_home":false,"content":{"sections":[{"template":"basic-template","fields":{"subtitle":"Singleton","text":"Singleton in Java, lazily loaded and thread safe."}},{"template":"snippet-template","fields":{"lang":"java","code":"package com.nodeux.dpatterns.creational.singleton;\n\n/* Lazy loading, Thread safe. */\n\npublic class SingletonV2 {\n\n    private static volatile SingletonV2 instance = null;\n\n    private SingletonV2() {\n    }\n\n    public static SingletonV2 getInstance() {\n        if (instance == null) {\n            synchronized (SingletonV2.class) {\n                if (instance == null) {\n                    instance = new SingletonV2();\n                }\n            }\n\n        }\n        return instance;\n    }\n}\n"}},{"template":"basic-template","fields":{"subtitle":"Builder","text":"Builder in Java, Sandwich Object Example."}},{"template":"snippet-template","fields":{"lang":"java","code":"package com.nodeux.dpatterns.creational.builder;\n\npublic class Sandwich {\n\n    public static class Builder {\n        private String typeOfBread;\n        private String toppings;\n        private String condiments;\n        private String typeOfMeat;\n\n        public Builder bread(String typeOfBread) {\n            this.typeOfBread = typeOfBread;\n            return this;\n        }\n\n        public Builder toppings(String toppings) {\n            this.toppings = toppings;\n            return this;\n        }\n\n        public Builder condiments(String condiments) {\n            this.condiments = condiments;\n            return this;\n        }\n\n        public Builder meat(String typeOfMeat) {\n            this.typeOfMeat = typeOfMeat;\n            return this;\n        }\n\n        public Sandwich build() {\n            return new Sandwich(this);\n        }\n    }\n\n    private String typeOfBread;\n    private String toppings;\n    private String condiments;\n    private String typeOfMeat;\n\n    private Sandwich(Builder builder) {\n        typeOfBread = builder.typeOfBread;\n        toppings = builder.toppings;\n        condiments = builder.condiments;\n        typeOfMeat = builder.typeOfMeat;\n    }\n\n    public String getTypeOfBread() {\n        return typeOfBread;\n    }\n\n    public String getToppings() {\n        return toppings;\n    }\n\n\n    public String getCondiments() {\n        return condiments;\n    }\n\n    public String getTypeOfMeat() {\n        return typeOfMeat;\n    }\n\n}\n"}}]}}